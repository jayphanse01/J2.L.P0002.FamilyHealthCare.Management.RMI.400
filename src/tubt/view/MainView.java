/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tubt.view;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.rmi.Naming;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.regex.Pattern;
import javafx.scene.input.KeyCode;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tubt.dto.RegistrationDTO;
import tubt.interfaces.RegistrationInterface;
import tubt.interfaces.impl.RegistrationImpl;
import tubt.utils.Constants;

/**
 *
 * @author buith
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form mainView
     */
    private RegistrationInterface registrationInterface;
    private DefaultTableModel tblRegistrationModel;
    private DefaultTableModel tblRegistrationSearchModel;
    private boolean isFindByID = false;
    private boolean isDelete = false;
    private boolean isAddNewOrUpdate = true;

    public MainView() {
        initComponents();
        getConnectionToServer();
        getRegistrations();
    }

    private void getConnectionToServer() {
        try {
            registrationInterface = (RegistrationInterface) Naming.lookup(Constants.RMI_URL);
        } catch (Exception e) {
            System.out.println("Error while connecting to server...");
            e.printStackTrace();
        }
    }

    private void getRegistrations() {

        try {

            tblRegistrationModel = new DefaultTableModel(new String[]{"ID", "Full Name", "Age", "Gender", "Phone", "Address"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // or a condition at your choice with row and column
                }
            };

            ArrayList<RegistrationDTO> registrationList = registrationInterface.findAllRegistrations();
            for (RegistrationDTO dto : registrationList) {
                Vector registrationData = new Vector();
                String id = dto.getRegistrationID();
                String fullName = dto.getFullName();
                int age = dto.getAge();
                String gender = ((dto.isGender()) ? "Male" : "Female");
                //String email = dto.getEmail();
                String phone = dto.getPhone();
                String address = dto.getAddress();
                //int numberOfMember = dto.getNumberOfMember();
                //int numberOfChildren = dto.getNumberOfChildren();
                //int numberOfAdults = dto.getNumberOfAdults();
                registrationData.add(id);
                registrationData.add(fullName);
                registrationData.add(age);
                registrationData.add(gender);
                //registrationData.add(email);
                registrationData.add(phone);
                registrationData.add(address);
                //registrationData.add(numberOfMember);
                //registrationData.add(numberOfChildren);
                //registrationData.add(numberOfAdults);
                tblRegistrationModel.addRow(registrationData);
            }
            tblRegistration.setModel(tblRegistrationModel);
            tblRegistration.updateUI();
        } catch (Exception e) {
            System.out.println("Cannot load data to table...");
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grSex = new javax.swing.ButtonGroup();
        jTextField7 = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        mainPart = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        lblSortByName = new javax.swing.JLabel();
        cbbSortBy = new javax.swing.JComboBox<>();
        btnSearchByName = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnGetAllData = new javax.swing.JButton();
        detailedPart = new javax.swing.JPanel();
        lblRegistrationID = new javax.swing.JLabel();
        lblFullName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblNumberOfMember = new javax.swing.JLabel();
        lblInclude = new javax.swing.JLabel();
        lblChildren = new javax.swing.JLabel();
        lblAdults = new javax.swing.JLabel();
        txtRegistrationID = new javax.swing.JTextField();
        txtNumberOfMember = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        lblSex = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        txtFullName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtAdults = new javax.swing.JTextField();
        txtChildren = new javax.swing.JTextField();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnFindByID = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        taAddress = new javax.swing.JTextArea();

        jTextField7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));

        lblTitle.setFont(new java.awt.Font("Gill Sans MT", 0, 36)); // NOI18N
        lblTitle.setText("Family Healthcare Management");

        mainPart.setBorder(javax.swing.BorderFactory.createTitledBorder("Main part:"));

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRegistration.getTableHeader().setReorderingAllowed(false);
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegistration);

        lblSortByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSortByName.setText("Sort by Name: ");

        cbbSortBy.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Descending", "Ascending" }));
        cbbSortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbSortByActionPerformed(evt);
            }
        });

        btnSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchByName.setText("Search by name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        txtSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchByName.setPreferredSize(new java.awt.Dimension(72, 23));

        btnGetAllData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGetAllData.setText("Get all Data");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPartLayout = new javax.swing.GroupLayout(mainPart);
        mainPart.setLayout(mainPartLayout);
        mainPartLayout.setHorizontalGroup(
            mainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(mainPartLayout.createSequentialGroup()
                .addGroup(mainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPartLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSortByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(btnSearchByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPartLayout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(btnGetAllData)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPartLayout.setVerticalGroup(
            mainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPartLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(mainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSortByName)
                    .addComponent(cbbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnGetAllData)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        detailedPart.setBorder(javax.swing.BorderFactory.createTitledBorder("Detailed part:"));

        lblRegistrationID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblRegistrationID.setText("Registration ID:");

        lblFullName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFullName.setText("Full name:");

        lblAge.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAge.setText("Age:");

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEmail.setText("Email:");

        lblPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPhone.setText("Phone:");

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAddress.setText("Address:");

        lblNumberOfMember.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNumberOfMember.setText("Number of member:");

        lblInclude.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblInclude.setText("Include:");

        lblChildren.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblChildren.setText("Children");

        lblAdults.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAdults.setText("Adults");

        txtRegistrationID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtNumberOfMember.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtAge.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblSex.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSex.setText("Sex:");

        grSex.add(rbMale);
        rbMale.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbMale.setText("Male");

        grSex.add(rbFemale);
        rbFemale.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbFemale.setText("Female");

        txtFullName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtAdults.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtChildren.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnAddNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNew.setText("Add new");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnFindByID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFindByID.setText("Find by ID");
        btnFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByIDActionPerformed(evt);
            }
        });

        taAddress.setColumns(20);
        taAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        taAddress.setRows(5);
        jScrollPane3.setViewportView(taAddress);

        javax.swing.GroupLayout detailedPartLayout = new javax.swing.GroupLayout(detailedPart);
        detailedPart.setLayout(detailedPartLayout);
        detailedPartLayout.setHorizontalGroup(
            detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailedPartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddNew)
                    .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblInclude)
                        .addComponent(lblAddress)
                        .addComponent(lblPhone)
                        .addComponent(lblEmail)
                        .addComponent(lblAge)
                        .addComponent(lblFullName)
                        .addComponent(lblRegistrationID)
                        .addComponent(lblNumberOfMember)))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(detailedPartLayout.createSequentialGroup()
                        .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFindByID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFullName)
                    .addGroup(detailedPartLayout.createSequentialGroup()
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbMale)
                        .addGap(18, 18, 18)
                        .addComponent(rbFemale))
                    .addComponent(txtEmail)
                    .addComponent(txtPhone)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailedPartLayout.createSequentialGroup()
                        .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(detailedPartLayout.createSequentialGroup()
                                .addComponent(txtChildren)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblChildren)
                                .addGap(18, 18, 18)
                                .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, detailedPartLayout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAdults))
                    .addComponent(jScrollPane3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        detailedPartLayout.setVerticalGroup(
            detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailedPartLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegistrationID)
                    .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByID))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFullName)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSex)
                    .addComponent(rbMale)
                    .addComponent(rbFemale))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAddress)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumberOfMember)
                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInclude)
                    .addComponent(lblChildren)
                    .addComponent(lblAdults)
                    .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtChildren, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(detailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnRemove))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(lblTitle)
                .addContainerGap(299, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(mainPart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detailedPart, javax.swing.GroupLayout.PREFERRED_SIZE, 434, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailedPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        String messError = "";
        boolean invalid = false;
        String registrationID = txtRegistrationID.getText().trim();
        String fullName = txtFullName.getText().trim();
        String ageText = txtAge.getText().trim();
        boolean gender;
        if (rbMale.isSelected()) {
            gender = true;
        } else {
            gender = false;
        }
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String address = taAddress.getText().trim();
        String numberOfMemberText = txtNumberOfMember.getText().trim();
        String numberOfChildrenText = txtChildren.getText().trim();
        String numberOfAdultsText = txtAdults.getText().trim();
        //check regis id
        if (registrationID.length() > 10 || registrationID.isEmpty() || !registrationID.matches(Constants.ID_REGEX)) {
            messError = "ID: Max length is 10, not contains special characters!";
            invalid = true;
        }
        //check regis fullName
        if (fullName.length() > 50 || fullName.isEmpty()) {
            messError = "FullName: Max length is 50";
            invalid = true;
        }
        //check age
        if (ageText.isEmpty() || !ageText.matches(Constants.NUMBER_REGEX)) {
            messError = "Age: must be >= 0";
            invalid = true;
        }
        //check email
        if (email.length() > 30 || email.isEmpty() || !email.matches(Constants.EMAIL_REGEX)) {
            messError = "Email: Max length is 30, contains only one '@' character, do not contain spectial characters (!, #, $)";
            invalid = true;
        }
        //check phone
        if (phone.length() > 15 || phone.isEmpty() || !phone.matches(Constants.NUMBER_REGEX)) {
            messError = "Phone: Max length is 15, contain numeric characters only (0-9)";
            invalid = true;
        }
        //check number of member
        if (numberOfMemberText.isEmpty() || !numberOfMemberText.matches(Constants.NUMBER_REGEX)) {
            messError = "Number of member: Must be >= 0";
            invalid = true;
        }
        //check number of children
        if (numberOfChildrenText.isEmpty() || !numberOfChildrenText.matches(Constants.NUMBER_REGEX)) {
            messError = "Number of children: Must be >= 0";
            invalid = true;
        }
        //check number of adults 
        if (numberOfAdultsText.isEmpty() || !numberOfAdultsText.matches(Constants.NUMBER_REGEX)) {
            messError = "Number of adults: Must be >= 0";
            invalid = true;
        }

        if (invalid) {
            JOptionPane.showMessageDialog(this, "Invalid input: \n" + messError);
        } else {
            int age = Integer.valueOf(ageText);
            int numberOfMember = Integer.valueOf(numberOfMemberText);
            int numberOfChildren = Integer.valueOf(numberOfChildrenText);
            int numberOfAdults = Integer.valueOf(numberOfAdultsText);
            if (numberOfAdults + numberOfChildren != numberOfMember) {

                JOptionPane.showMessageDialog(this, "Please enter the correct number of member!");
            } else {
                //add new mode
                if (isAddNewOrUpdate) {
                    try {
                        System.out.println(checkDuplicateID(registrationID));
                        if (checkDuplicateID(registrationID) == true) {

                            JOptionPane.showMessageDialog(this, "ID " + registrationID + " has been exist!");
                        } else {
                            RegistrationDTO dto = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numberOfMember, numberOfChildren, numberOfAdults);
                            //registrationInterface = (RegistrationInterface) Naming.lookup(Constants.RMI_URL);
                            boolean created = registrationInterface.createRegistration(dto);
                            if (created) {
                                txtRegistrationID.setText("");
                                txtRegistrationID.setEditable(true);
                                txtFullName.setText("");
                                txtAge.setText("");
                                grSex.clearSelection();
                                txtEmail.setText("");
                                txtPhone.setText("");
                                taAddress.setText("");
                                txtNumberOfMember.setText("");
                                txtChildren.setText("");
                                txtAdults.setText("");
                                getRegistrations();
                                tblRegistration.updateUI();
                                JOptionPane.showMessageDialog(this, "Add Success!");
                            } else {
                                JOptionPane.showMessageDialog(this, "Add Failed!");
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Cannot add!");
                    }

                } else { //save mode
                    try {
                        RegistrationDTO dto = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numberOfMember, numberOfChildren, numberOfAdults);

                        boolean updated = registrationInterface.updateRegistration(dto);
                        if (updated) {
                            txtRegistrationID.setText("");
                            txtRegistrationID.setEditable(true);
                            txtFullName.setText("");
                            txtAge.setText("");
                            grSex.clearSelection();
                            txtEmail.setText("");
                            txtPhone.setText("");
                            taAddress.setText("");
                            txtNumberOfMember.setText("");
                            txtChildren.setText("");
                            txtAdults.setText("");
                            getRegistrations();
                            tblRegistration.updateUI();
                            JOptionPane.showMessageDialog(this, "Update Success!");
                        } else {
                            JOptionPane.showMessageDialog(this, "Update Failed!");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Cannot update...");
                    }
                }
            }

        }


    }//GEN-LAST:event_btnSaveActionPerformed


    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        // TODO add your handling code here:
        isFindByID = true;
        isAddNewOrUpdate = false;
        isDelete = true;
        int selectedRow = tblRegistration.getSelectedRow();
        String selectedId = (String) tblRegistration.getValueAt(selectedRow, 0);

        try {
            RegistrationDTO dto = registrationInterface.findByRegistrationID(selectedId);
            txtRegistrationID.setText(dto.getRegistrationID());
            txtRegistrationID.setEditable(false);
            txtFullName.setText(dto.getFullName());
            txtAge.setText(Integer.toString(dto.getAge()));
            if (dto.isGender()) {
                rbMale.setSelected(true);
                rbFemale.setSelected(false);

            } else {
                rbMale.setSelected(false);
                rbFemale.setSelected(true);
            }
            txtEmail.setText(dto.getEmail());
            txtPhone.setText(dto.getPhone());
            taAddress.setText(dto.getAddress());
            txtNumberOfMember.setText(Integer.toString(dto.getNumberOfMember()));
            txtChildren.setText(Integer.toString(dto.getNumberOfChildren()));
            txtAdults.setText(Integer.toString(dto.getNumberOfAdults()));

        } catch (Exception e) {
            System.out.println("");
            e.printStackTrace();
        }

    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        // TODO add your handling code here:
        isAddNewOrUpdate = true;
        txtRegistrationID.setText("");
        txtRegistrationID.setEditable(true);
        txtFullName.setText("");
        txtAge.setText("");
        grSex.clearSelection();
        txtEmail.setText("");
        txtPhone.setText("");
        taAddress.setText("");
        txtNumberOfMember.setText("");
        txtChildren.setText("");
        txtAdults.setText("");
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        String id = txtRegistrationID.getText();
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove this registration?");
        if (confirm == JOptionPane.YES_OPTION) {
            if (isDelete) {
                try {
                    boolean deleted = registrationInterface.removeRegistration(id);
                    if (deleted) {
                        txtRegistrationID.setText("");
                        txtRegistrationID.setEditable(true);
                        txtFullName.setText("");
                        txtAge.setText("");
                        grSex.clearSelection();
                        txtEmail.setText("");
                        txtPhone.setText("");
                        taAddress.setText("");
                        txtNumberOfMember.setText("");
                        txtChildren.setText("");
                        txtAdults.setText("");
                        getRegistrations();
                        tblRegistration.updateUI();
                        JOptionPane.showMessageDialog(this, "Remove Success!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Remove Fail!");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error while deleting...");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nothing to Remove!");
            }
        } else {
            txtRegistrationID.setText("");
            txtRegistrationID.setEditable(true);
            txtFullName.setText("");
            txtAge.setText("");
            grSex.clearSelection();
            txtEmail.setText("");
            txtPhone.setText("");
            taAddress.setText("");
            txtNumberOfMember.setText("");
            txtChildren.setText("");
            txtAdults.setText("");
            getRegistrations();
            tblRegistration.updateUI();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByIDActionPerformed
        // TODO add your handling code here:
        isFindByID = true;
        String id = txtRegistrationID.getText();
        if (isFindByID) {
            try {
                RegistrationDTO dto = registrationInterface.findByRegistrationID(id);
                JOptionPane.showMessageDialog(this, "Found Success!");
                txtRegistrationID.setText(dto.getRegistrationID());
                txtRegistrationID.setEditable(false);
                txtFullName.setText(dto.getFullName());
                txtAge.setText(Integer.toString(dto.getAge()));
                if (dto.isGender()) {
                    rbMale.setSelected(true);
                    rbFemale.setSelected(false);

                } else {
                    rbMale.setSelected(false);
                    rbFemale.setSelected(true);
                }
                txtEmail.setText(dto.getEmail());
                txtPhone.setText(dto.getPhone());
                taAddress.setText(dto.getAddress());
                txtNumberOfMember.setText(Integer.toString(dto.getNumberOfMember()));
                txtChildren.setText(Integer.toString(dto.getNumberOfChildren()));
                txtAdults.setText(Integer.toString(dto.getNumberOfAdults()));

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot find!");
            }
        }
    }//GEN-LAST:event_btnFindByIDActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        // TODO add your handling code here:
        String searchName = txtSearchByName.getText();
        if (searchName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nothing to Search!");
        } else {
            try {
                tblRegistrationSearchModel = new DefaultTableModel(new String[]{"ID", "Full Name", "Age", "Gender", "Phone", "Address"}, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; // or a condition at your choice with row and column
                    }
                };
                ArrayList<RegistrationDTO> registrationList = registrationInterface.findAllRegistrations();
                for (RegistrationDTO dto : registrationList) {
                    Vector searchData = new Vector();
                    String id = dto.getRegistrationID();
                    String fullName = dto.getFullName();
                    int age = dto.getAge();
                    String gender = ((dto.isGender()) ? "Male" : "Female");

                    String phone = dto.getPhone();
                    String address = dto.getAddress();
                    if (fullName.contains(searchName)) {
                        searchData.add(id);
                        searchData.add(fullName);
                        searchData.add(age);
                        searchData.add(gender);

                        searchData.add(phone);
                        searchData.add(address);
                        System.out.println(searchData);
                        tblRegistrationSearchModel.addRow(searchData);
                    }
                }

                tblRegistration.setModel(tblRegistrationSearchModel);
                tblRegistration.updateUI();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot Search!");
            }
        }
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed
        // TODO add your handling code here:
        getRegistrations();
        txtRegistrationID.setText("");
        txtRegistrationID.setEditable(true);
        txtFullName.setText("");
        txtAge.setText("");
        grSex.clearSelection();
        txtEmail.setText("");
        txtPhone.setText("");
        taAddress.setText("");
        txtNumberOfMember.setText("");
        txtChildren.setText("");
        txtAdults.setText("");
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    private void cbbSortByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbSortByActionPerformed
        // TODO add your handling code here:
        String sortBy = cbbSortBy.getSelectedItem().toString();
        if (sortBy.equals("Ascending")) {
            try {
                ArrayList<RegistrationDTO> dto = registrationInterface.findAllRegistrations();
                sortAscendingByRegistrationName(dto);
                txtRegistrationID.setText("");
                txtRegistrationID.setEditable(true);
                txtFullName.setText("");
                txtAge.setText("");
                grSex.clearSelection();
                txtEmail.setText("");
                txtPhone.setText("");
                taAddress.setText("");
                txtNumberOfMember.setText("");
                txtChildren.setText("");
                txtAdults.setText("");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot sort ascending...");
            }
        } else if (sortBy.equals("Descending")) {
            try {
                ArrayList<RegistrationDTO> dto = registrationInterface.findAllRegistrations();
                sortDescendingByRegistrationName(dto);
                txtRegistrationID.setText("");
                txtRegistrationID.setEditable(true);
                txtFullName.setText("");
                txtAge.setText("");
                grSex.clearSelection();
                txtEmail.setText("");
                txtPhone.setText("");
                taAddress.setText("");
                txtNumberOfMember.setText("");
                txtChildren.setText("");
                txtAdults.setText("");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot sort descending...");
            }
        }
    }//GEN-LAST:event_cbbSortByActionPerformed

    private void sortAscendingByRegistrationName(ArrayList<RegistrationDTO> regisList) {
        Collections.sort(regisList, new Comparator<RegistrationDTO>() {
            @Override
            public int compare(RegistrationDTO o1, RegistrationDTO o2) {
                return o1.getFullName().compareTo(o2.getFullName());
            }
        });
        tblRegistrationModel.setRowCount(0);
        for (RegistrationDTO dto : regisList) {
            Vector searchData = new Vector();
            String id = dto.getRegistrationID();
            String fullName = dto.getFullName();
            int age = dto.getAge();
            String gender = ((dto.isGender()) ? "Male" : "Female");
            String phone = dto.getPhone();
            String address = dto.getAddress();
            searchData.add(id);
            searchData.add(fullName);
            searchData.add(age);
            searchData.add(gender);
            searchData.add(phone);
            searchData.add(address);
            //System.out.println(searchData);
            tblRegistrationModel.addRow(searchData);
        }
        tblRegistration.setModel(tblRegistrationModel);
        tblRegistration.updateUI();
    }

    private void sortDescendingByRegistrationName(ArrayList<RegistrationDTO> regisList) {
        Collections.sort(regisList, new Comparator<RegistrationDTO>() {
            @Override
            public int compare(RegistrationDTO o1, RegistrationDTO o2) {
                return o2.getFullName().compareTo(o1.getFullName());
            }

        });
        tblRegistrationModel.setRowCount(0);
        for (RegistrationDTO dto : regisList) {
            Vector searchData = new Vector();
            String id = dto.getRegistrationID();
            String fullName = dto.getFullName();
            int age = dto.getAge();
            String gender = ((dto.isGender()) ? "Male" : "Female");
            String phone = dto.getPhone();
            String address = dto.getAddress();
            searchData.add(id);
            searchData.add(fullName);
            searchData.add(age);
            searchData.add(gender);
            searchData.add(phone);
            searchData.add(address);
            //System.out.println(searchData);
            tblRegistrationModel.addRow(searchData);
        }
        tblRegistration.setModel(tblRegistrationModel);
        tblRegistration.updateUI();
        
    }

    private boolean checkDuplicateID(String id) {
        boolean check = false;
        //System.out.println(tblRegistrationModel.getRowCount());
        for (int i = 0; i < tblRegistrationModel.getRowCount(); i++) {
            String regisID = (String) tblRegistration.getValueAt(i, 0);
            //System.out.println("ID: " + regisID);
            if (id.equals(regisID)) {
                return check = true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainView mainView = new MainView();
                mainView.setVisible(true);
                mainView.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnFindByID;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.JComboBox<String> cbbSortBy;
    private javax.swing.JPanel detailedPart;
    private javax.swing.ButtonGroup grSex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAdults;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblChildren;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblInclude;
    private javax.swing.JLabel lblNumberOfMember;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblRegistrationID;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblSortByName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mainPart;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTextArea taAddress;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JTextField txtAdults;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtChildren;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNumberOfMember;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationID;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables
}
